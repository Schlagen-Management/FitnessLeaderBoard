@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Authentication
@using FitnessLeaderBoard.Data.EntityClasses
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.WebUtilities
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

@inject SignInManager<FlbUser> signInManager
@inject ILogger<LoginComponent> logger
@inject UserManager<FlbUser> userManager
@inject HttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager

<AuthorizeView>
    <Authorized>
        <div class="text-center my-3">
            <a href=@GetLogoutUrl()
               class="btn btn-primary btn-sm">SIGN OUT</a>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container login-form">
            <div class="text-center my-2 signin-title">Sign in with</div>
            @if ((externalLogins?.Count ?? 0) == 0)
            {
                <div>
                    <p>
                        There are no external authentication services configured.
                    </p>
                </div>
            }
            else
            {
                <div class="row social-btn">
                    @foreach (var provider in externalLogins)
                    {
                        <div class="col-6">
                            <a href="@GetLoginUrl(provider.Name)" target="_top" class="@GetSocialButtonColorCss(provider)">
                                <i class="@GetSocialCss(provider)"></i>
                                <b>@provider.DisplayName</b>
                            </a>
                        </div>
                    }
                </div>
            }
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    [TempData]
    private string errorMessage { get; set; }

    private string returnUrl { get; set; }

    private IList<AuthenticationScheme> externalLogins { get; set; }

    private string userId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get the user Id
        var authState = await authStateTask;
        userId = authState.User.Identity.IsAuthenticated
            ? userManager.GetUserId(authState.User)
            : string.Empty;

        if (authState.User.Identity.IsAuthenticated == false
            || string.IsNullOrEmpty(userId))
        {
            // No external login info, get the collection of external logins
            externalLogins
                = (await signInManager.GetExternalAuthenticationSchemesAsync())
                .ToList();
        }

        returnUrl = "~/";

        await base.OnInitializedAsync();
    }

    protected string GetSocialCss(AuthenticationScheme provider)
    {
        return "fa fa-" + provider.Name.ToLower();
    }

    protected string GetSocialButtonColorCss(AuthenticationScheme provider)
    {
        switch (provider.Name.ToLower())
        {
            case "facebook":
                return "btn btn-primary";
            case "twitter":
                return "btn btn-info";
            case "google":
                return "btn btn-danger";
            default:
                return "btn btn-primary";
        }
    }

    protected string GetLoginUrl(string provider)
    {
        // Query parameters
        var queryParameters
                = new Dictionary<string, string> { { "returnUrl", returnUrl },
                    { "provider", provider } };

        var loginUrl = QueryHelpers.AddQueryString("/Login", queryParameters);

        return loginUrl;
    }

    protected string GetLogoutUrl()
    {
        // Query parameters
        var queryParameters
                = new Dictionary<string, string> { { "returnUrl", returnUrl } };

        var logoutUrl = QueryHelpers.AddQueryString("/Logout", queryParameters);

        return logoutUrl;
    }
}
