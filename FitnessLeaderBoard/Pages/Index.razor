@page "/"

@using FitnessLeaderBoard.Data.EntityClasses
@using FitnessLeaderBoard.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging

@inject StepDataService stepDataService
@inject UserManager<FlbUser> userManager
@inject ILogger<Index> logger

<div class="row">
    <div class="col-lg-12 text-center">
        <h1 class="h4 my-2">Fitness Leaderboard</h1>
    </div>
</div>
<hr>
<div class="row">
    <div class="col-sm-3">
        <!-- Left ad block visible on tablets and up -->
        <AdBlockA />
        <!-- end left ad block -->
    </div>
    <div class="col-sm-4 offset-sm-1">
        <ul class="nav nav-pills mb-3 justify-content-center" id="pills-tab" role="tablist">
            <li class="nav-item"> <a class="nav-link active" id="pills-week-tab" data-toggle="pill" href="#pills-week" role="tab" aria-controls="pills-week" aria-selected="true">THIS WEEK</a> </li>
            <li class="nav-item"> <a class="nav-link" id="pills-alltime-tab" data-toggle="pill" href="#pills-alltime" role="tab" aria-controls="pills-alltime" aria-selected="false">ALL TIME</a> </li>
        </ul>
        <div class="tab-content overflow-auto" id="pills-tab-content">
            <div class="tab-pane fade show active" id="pills-week" role="tabpanel" aria-labelledby="pills-week-tab">
                @if (leaderboardLastSevenDays == null || leaderboardLastSevenDays.Count() == 0)
                {
                    <div class="container">
                        No walkers currently registered
                    </div>
                }
                @if (leaderboardLastSevenDays != null && leaderboardLastSevenDays.Count() > 0)
                {
                    <div class="container">
                        <!-- This row houses the 3 top leaders (weekly view)-->
                        <div class="row pb-3 top-three thiswk">
                            @if (leaderboardLastSevenDays.Count() > 1)
                            {
                                <div class="col-4 text-center runner-up">
                                    <div class="second">
                                        <span class="silver">2</span>
                                        <div class="md-avatar user-color rounded-circle">
                                            <b>@leaderboardLastSevenDays[1].Initials</b>
                                        </div>
                                    </div>
                                    @(Utilities.Truncate(leaderboardLastSevenDays[1].NameToDisplay, 13))
                                    @leaderboardLastSevenDays[1].LastSevenDaysStepCount
                                </div>
                            }
                            @if (leaderboardLastSevenDays.Count() > 0)
                            {
                                <div class="col-4 text-center">
                                    <div class="first">
                                        <span class="gold">1</span>
                                        <div class="md-avatar user-color rounded-circle size-2">
                                            <b>@leaderboardLastSevenDays[0].Initials</b>
                                        </div>
                                    </div>
                                    @(Utilities.Truncate(leaderboardLastSevenDays[0].NameToDisplay, 13))
                                    @leaderboardLastSevenDays[0].LastSevenDaysStepCount
                                </div>
                            }
                            @if (leaderboardLastSevenDays.Count > 2)
                            {
                                <div class="col-4 text-center runner-up">
                                    <div class="third">
                                        <span class="bronze">3</span>
                                        <div class="md-avatar user-color rounded-circle">
                                            <b>@leaderboardLastSevenDays[2].Initials</b>
                                        </div>
                                    </div>
                                    @(Utilities.Truncate(leaderboardLastSevenDays[2].NameToDisplay, 13))
                                    @leaderboardLastSevenDays[2].LastSevenDaysStepCount
                                </div>
                            }
                        </div>
                    </div>
                }

                @if (userInfo != null)
                {
                    <!-- Ths section is available after login -->
                    <div class="row pb-3 myrank thiswk">
                        <!-- With Avatar -->
                        @*<div class="col user-avatar"><img src="https://mdbootstrap.com/img/Photos/Avatars/img%20(4).jpg" alt="Avatar" class="md-avatar rounded-circle size-1"></div>*@
                        <!-- No Avatar just user settings -->
                        <div class="col user-avatar">
                            <div class="md-avatar user-color rounded-circle size-1"><a href="Identity/Account/Manage" class="stretched-link"><b>@userInfo.Initials</b></a></div>
                        </div>
                        <div class="col user-stats">
                            <span>Rank:</span>@usersLast7DaysRank<br>
                            <span>Steps:</span> @userInfo.LastSevenDaysStepCount<br />
                        </div>
                        <div class="col user-settings">
                            <a href="UserProfile" class="btn btn-link">
                                <i class="fa fa-plus"></i>
                            </a>
                        </div>
                    </div>
                    <!-- end available after login -->
                }

                @if (leaderboardLastSevenDays != null && leaderboardLastSevenDays.Count() > 3)
                {
                    <table class="table table-sm table-borderless">
                        <tbody>
                            @for (var index = 3; index < leaderboardLastSevenDays.Count(); index++)
                            {
                                <tr>
                                    <!-- This row as template for users without avatar - uses settings from user profile page -->
                                    <th class="align-middle" scope="row">@(index + 1)</th>
                                    <td class="align-middle">
                                        <div class="md-avatar user-color rounded-circle size-1">
                                            <b>@leaderboardLastSevenDays[index].Initials</b>
                                        </div>
                                    </td>
                                    <td class="align-middle">@(Utilities.Truncate(leaderboardLastSevenDays[index].NameToDisplay, 20))</td>
                                    <td class="align-middle">@leaderboardLastSevenDays[index].LastSevenDaysStepCount</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }

            </div>
            <div class="tab-pane fade" id="pills-alltime" role="tabpanel" aria-labelledby="pills-alltime-tab">
                @if (leaderboardAllTime == null || leaderboardAllTime.Count() == 0)
                {
                    <div class="container">
                        No walkers currently registered
                    </div>
                }
                @if (leaderboardAllTime != null && leaderboardAllTime.Count() > 0)
                {
                    <div class="container">
                        <!-- This row houses the 3 top leaders (all time view)-->
                        <div class="row pb-3 top-three thiswk">
                            @if (leaderboardAllTime.Count() > 1)
                            {
                                <div class="col-4 text-center runner-up">
                                    <div class="second">
                                        <span class="silver">2</span>
                                        <div class="md-avatar user-color rounded-circle">
                                            <b>@leaderboardAllTime[1].Initials</b>
                                        </div>
                                    </div>
                                    @(Utilities.Truncate(leaderboardAllTime[1].NameToDisplay, 13))<br />
                                    @leaderboardAllTime[1].AllTimeStepCount
                                </div>
                            }
                            @if (leaderboardAllTime.Count() > 0)
                            {
                                <div class="col-4 text-center">
                                    <div class="first">
                                        <span class="gold">1</span>
                                        <div class="md-avatar user-color rounded-circle size-2">
                                            <b>@leaderboardAllTime[0].Initials</b>
                                        </div>
                                    </div>
                                    @(Utilities.Truncate(leaderboardAllTime[0].NameToDisplay, 13))<br />
                                    @leaderboardAllTime[0].AllTimeStepCount
                                </div>
                            }
                            @if (leaderboardAllTime.Count > 2)
                            {
                                <div class="col-4 text-center runner-up">
                                    <div class="third">
                                        <span class="bronze">3</span>
                                        <div class="md-avatar user-color rounded-circle">
                                            <b>@leaderboardAllTime[2].Initials</b>
                                        </div>
                                    </div>
                                    @(Utilities.Truncate(leaderboardAllTime[2].NameToDisplay, 13))<br />
                                    @leaderboardAllTime[0].AllTimeStepCount
                                </div>
                            }
                        </div>
                    </div>
                }

                @if (userInfo != null)
                {
                    <!-- Ths section is available after login -->
                    <div class="row pb-3 myrank alltime">
                        <!-- With Avatar -->
                        @*<div class="col user-avatar"><img src="https://mdbootstrap.com/img/Photos/Avatars/img%20(4).jpg" alt="Avatar" class="md-avatar rounded-circle size-1"></div>*@
                        <!-- No Avatar just user settings -->
                        <div class="col user-avatar">
                            <div class="md-avatar user-color rounded-circle size-1"><a href="Identity/Account/Manage" class="stretched-link"><b>@userInfo.Initials</b></a></div>
                        </div>
                        <div class="col user-stats">
                            <span>Rank:</span>@usersAllTimeRank<br>
                            <span>Steps:</span> @userInfo.AllTimeStepCount
                        </div>
                        <div class="col user-settings">
                            <a href="UserProfile" class="btn btn-link">
                                <i class="fa fa-plus"></i>
                            </a>
                        </div>
                    </div>
                    <!-- end available after login -->
                }

                @if (leaderboardAllTime != null && leaderboardAllTime.Count() > 3)
                {
                    <table class="table table-sm table-borderless">
                        <tbody>
                            @for (var index = 3; index < leaderboardAllTime.Count(); index++)
                            {
                                <tr>
                                    <!-- This row as template for users without avatar - uses settings from user profile page -->
                                    <th class="align-middle" scope="row">@(index + 1)</th>
                                    <td class="align-middle">
                                        <div class="md-avatar user-color rounded-circle size-1">
                                            <b>@leaderboardAllTime[index].Initials</b>
                                        </div>
                                    </td>
                                    <td class="align-middle">@(Utilities.Truncate(leaderboardAllTime[index].NameToDisplay, 20))</td>
                                    <td class="align-middle">@leaderboardAllTime[index].AllTimeStepCount</td>

                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
        <AuthorizeView>
            <Authorized>
                <div class="text-center my-3"> <a href="Identity/Account/Logout" class="btn btn-primary btn-sm">SIGN OUT</a> </div>
            </Authorized>
            <NotAuthorized>
                <div class="text-center my-3">
                    <a href="Identity/Account/Login" class="btn btn-primary btn-sm">SIGN IN</a>
                    @*<FitnessLeaderBoard.Components.LoginComponent />*@
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
    <div class="col-sm-3 offset-sm-1">
        <!-- Right ad block visible on tablets and up -->
        <AdBlockA />
        <!-- end right ad block-->
        <!-- Ad space visible on phones only - we could rotate ads on screen changes or on a timer -->
        <div class="mobile-advertisement text-center d-block d-sm-none" id="mobile-advertisement"> <img src="https://via.placeholder.com/320x50?text=320x50+AD" alt="Placeholder Ad"> </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    // The logged in user's user Id
    private string userId;

    // the leaderboard
    private List<LeaderboardData> leaderboardLastSevenDays { get; set; }

    private List<LeaderboardData> leaderboardAllTime { get; set; }

    private int usersLast7DaysRank { get; set; }

    private int usersAllTimeRank { get; set; }

    private LeaderboardData userInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get the user Id
        var authState = await authStateTask;
        userId = authState.User.Identity.IsAuthenticated
            ? userManager.GetUserId(authState.User)
            : string.Empty;

        // If the user is authenticated, retrieve info
        if (authState.User.Identity.IsAuthenticated
            && !string.IsNullOrEmpty(userId))
        {
            usersLast7DaysRank
                = await stepDataService.GetUsersRank(userId,
                StepDataService.StepCountType.SevenDayStepCount);

            usersAllTimeRank
                = await stepDataService.GetUsersRank(userId,
                StepDataService.StepCountType.AllTimeStepCount);

            userInfo
                = await stepDataService.GetUserLeaderboardInfo(userId);
            if (userInfo == null)
            {
                userInfo = new LeaderboardData
                {
                    UserId = userId,
                    NameToDisplay = authState.User.Identity.Name,
                    Initials
                        = stepDataService
                        .ConvertNameToInitials(authState.User.Identity.Name),
                    DailyStepCount = 0,
                    LastSevenDaysStepCount = 0,
                    LastThirtyDaysStepCount = 0,
                    AllTimeStepCount = 0
                };
            }
        }

        // Get the leaderboard for the last 7 days
        leaderboardLastSevenDays
            = await stepDataService.GetLeaderboard(10)
            .OrderByDescending(lb => lb.LastSevenDaysStepCount)
            .ToListAsync();

        // Get the leaderboard for the last 30 days
        leaderboardAllTime
                = await stepDataService.GetLeaderboard(10)
                .OrderByDescending(lb => lb.AllTimeStepCount)
                .ToListAsync();
    }
}
